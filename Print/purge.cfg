[gcode_macro ADAPTIVE_PURGE]
gcode:
  {% set ADAPTIVE = params.ADAPTIVE|default(True)|boolean %}
  {% set ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
  {% if not ready and ADAPTIVE %}
    # RESPOND MSG="Adaptive bed mesh: parameters not already computed, automatically calling the COMPUTE_MESH_PARAMETERS macro prior to the mesh"
    COMPUTE_MESH_PARAMETERS {rawparams}
    M400 # mandatory to flush the gcode buffer and be sure to use the last computed parameters
  {% endif %}
  _DO_ADAPTIVE_PURGE {rawparams}

[gcode_macro _DO_ADAPTIVE_PURGE]
gcode:
  {% set ADAPTIVE = params.ADAPTIVE|default(True)|boolean %}
  {% set KEEP_READY = params.KEEP_READY|default(FALSE)|boolean %}
  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default(False)|boolean %}

  {% if printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_nominal or not printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].do_mesh %}
    {% set ADAPTIVE = FALSE|boolean %}
  {% endif %}
  
  {% if params.RETRACTION_AMOUNT is defined and params.RETRACTION_SPEED is defined %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0.0|float %}
    {% set RETRACTION_SPEED = 0.0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|boolean %}
  {% endif %}

  {% if ADAPTIVE %}
    {% set object_min = (printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].object_min|string).split(',') %}
    {% set object_max = (printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].object_max|string).split(',') %}
    {% set object_distance = printer["gcode_macro _PURGE_LINE_VARIABLES"].object_distance %}
    {% set adaptive_pos = printer["gcode_macro _PURGE_LINE_VARIABLES"].adaptive_pos %}

    {% set margin_x = (printer["gcode_macro _PURGE_LINE_VARIABLES"].min_edge_distance[0] + printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_x|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_x|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_x|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_x|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_x|float)|abs %}

    {% set margin_y = (printer["gcode_macro _PURGE_LINE_VARIABLES"].min_edge_distance[1] + printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_y|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_y|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_y|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_y|float + printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_y|float)|abs %}

    {% if adaptive_pos == 'front left' %}
      {% set init_x = object_min[0]|float %}
      {% set init_y = object_min[1]|float %}
    {% elif adaptive_pos == 'front right' %}
      {% set init_x = object_max[0]|float %}
      {% set init_y = object_min[1]|float %}
    {% elif adaptive_pos == 'back left' %}
      {% set init_x = object_min[0]|float %}
      {% set init_y = object_max[1]|float %}
    {% elif adaptive_pos == 'back right' %}
      {% set init_x = object_max[0]|float %}
      {% set init_y = object_max[1]|float %}
    {% endif %}

    {% set init_x = init_x + object_distance[0]|float %}
    {% set init_y = init_y + object_distance[1]|float %}
  {% endif %}

  {% if not ADAPTIVE or init_x < margin_x or init_x > (printer["gcode_macro _BED_SIZE"].bed_size[0] - margin_x) or init_y < margin_y or init_y > (printer["gcode_macro _BED_SIZE"].bed_size[1] - margin_y) %}
    {% set init_x = printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[0]|float %}
    {% set init_y = printer["gcode_macro _PURGE_LINE_VARIABLES"].heat_up_pos[1]|float %}
    {% set ADAPTIVE = FALSE|boolean %}
  {% endif %}


  G90
  G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_f}
  G91
  G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_move_f}
  G90

  {% if ADAPTIVE %}
    G0 X{init_x} Y{init_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].start_f}
  {% endif %}

  G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].line_height}
  G91
  G1 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_f} E{printer["gcode_macro _PURGE_LINE_VARIABLES"].first_line_e}
  G90

  {% if DOUBLE_LINE %}
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_move_f}
    G1 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_y} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_f} E{printer["gcode_macro _PURGE_LINE_VARIABLES"].second_line_e}
    G90
  {% endif %}
 
  {% if FIRMWARE_RETRACT %}
    G10
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_y} Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_f}
    G90
  {% else %}
    G91
    G0 X{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_x} Y{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_y} Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].wipe_move_f} E{printer["gcode_macro _PURGE_LINE_VARIABLES"].retraction * -1}
    G90
  {% endif %}
      
  G0 Z{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_z} F{printer["gcode_macro _PURGE_LINE_VARIABLES"].finish_f}

  {% if not keep_ready %}
    # Set back the 'ready' parameter to false
    SET_GCODE_VARIABLE MACRO=_ADAPTIVE_MESH_VARIABLES VARIABLE=ready VALUE={False}
  {% endif %}
