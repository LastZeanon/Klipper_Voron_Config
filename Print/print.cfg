[gcode_macro START_PRINT]
description: Pre-Heat the bed and the nozzle, reset Feedrate and Flowrate, home all axes and clean the nozzle
variable_filament_type: 'None'
variable_filament_profile: 'None'
gcode:
  {% set PURGE_LINE = params.PURGE_LINE|default('TRUE')|string %}
  {% set DOUBLE_LINE = params.DOUBLE_LINE|default('FALSE')|string %}
  {% set FORCE_HOME = params.FORCE_HOME|default('TRUE')|string %}
  {% set SOAK_TIME = 600|int %}
  # {% set SOAK_TIME = params.SOAK_TIME|default(180)|int %}
  {% set BED_PRE_HEAT_OFFSET = params.BED_PRE_HEAT_OFFSET|default(15)|int %}
  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}
  {% set BRIM = params.BRIM|default(0)|int %}
  {% set SKIRTS = params.SKIRTS|default(0)|int %}
  
  {% if BRIM > 5 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}
  
  {% if SKIRTS > 3 %}
    {% set PURGE_LINE = 'FALSE' %}
  {% endif %}

  {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|float %}

  {% set FILAMENT_PROFILE = params.FILAMENT_PROFILE|default('None')|string %}
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('None')|string %}
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_type VALUE="'{ FILAMENT_TYPE }'"
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament_profile VALUE="'{ FILAMENT_PROFILE }'"

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  RUN_SHELL_COMMAND CMD=TELEGRAM_BOT_RESTART

  {% if printer['gcode_macro HEAT_SOAK'].stage in ("heating", "soaking") %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'done'"
  {% endif %}

  HEATER_PROFILE LOAD=260 HEATER=extruder DEFAULT=default VERBOSE=low
  HEATER_PROFILE LOAD=100 HEATER=heater_bed DEFAULT=default VERBOSE=low

  BED_MESH_PROFILE LOAD=default INTELLIGENT=1 TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP} FILAMENT_PROFILE='{FILAMENT_PROFILE}'

  {% if CHAMBER_TEMP > 0 and CHAMBER_TEMP <= 40 and printer['temperature_sensor Chamber_Temp'].temperature < (CHAMBER_TEMP - 5) %}
    M117 Heating Chamber
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
    G28 Z0
    G90
    G0 Z50
    TEMPERATURE_WAIT SENSOR='temperature_sensor Chamber_Temp' MINIMUM={CHAMBER_TEMP}
  {% endif %}

  M117 Starting up
  # Reset the G-Code Z offset (adjust Z offset if needed)
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate

  # HEATER_PROFILE LOAD=275 HEATER=extruder DEFAULT=default VERBOSE={VERBOSE}
  # HEATER_PROFILE LOAD=95 HEATER=heater_bed DEFAULT=default VERBOSE={VERBOSE}

  M117 Leveling
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=85
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM=85 MAXIMUM=86
  BED_MESH_CLEAR INTELLIGENT=1
  # Home the printer
  {% if FORCE_HOME == 'TRUE' %}
    LOCK_DOCKING
    G28 P0
    _CHECK_PROBE action=attach
    Z_TILT_ADJUST_BASE
    UNLOCK_DOCKING
    _CHECK_PROBE action=attach
    G28 X0 Y0 Z P0
  {% else %}
    G28 X0 Y0 Z0 P0
  {% endif %}


  M117 Heating up

  # Wait for bed to reach temperature
  M190 S{BED_TEMP}

  {% if BED_TEMP > 0 %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=120
    {% for i in range(SOAK_TIME) %}
      {% set remaining = SOAK_TIME - i %}
      M117 Soaking: {"%02d:%02d" % (remaining // 60, remaining % 60)}
      G4 P1000
    {% endfor %}
  {% endif %}

  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  # Zero Extruder
  G92 E0

  ENABLE_FILAMENT_SENSOR FILAMENT_TYPE='{FILAMENT_TYPE}' FILAMENT_PROFILE='{FILAMENT_PROFILE}'

  # BED_MESH_PROFILE LOAD=default
  # BED_MESH_PROFILE LOAD=SMOOTH
  BED_MESH_PROFILE LOAD=default INTELLIGENT=1 TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP} FILAMENT_PROFILE='{FILAMENT_PROFILE}'
  
  # SET_GCODE_OFFSET Z=-0.370 #Z=-0.46
  # SET_GCODE_OFFSET Z=-0.315 #Z=-0.280
  SET_GCODE_OFFSET Z=0.00 INTELLIGENT=1 TEMPERATURE_EXTRUDER={EXTRUDER_TEMP} TEMPERATURE_BED={BED_TEMP} FILAMENT_PROFILE='{FILAMENT_PROFILE}'

  SET_HEATER_FAN HEATER_FAN=bed_fan FAN_SPEED=0.4

  M117 Printing
  # G4 P60000
  
  G90
  G1 Z20
  G1 X0 F5000
  G1 Y0 F5000

  M83
  G1 E2 F2700
  M82

  {% if PURGE_LINE|upper == 'TRUE' %}
    # Move to start position
    # Move the Z Axis up
    G1 Z0.28
    # Draw the first line
    G91
    G1 X180 F1500 E15
    G90
    {% if DOUBLE_LINE|upper == 'TRUE' %}
      # Move to side a little
      G91
      G1 Y1 F5000
      # Draw the second line
      G1 X-180 F1500 E15
      G90
    {% endif %}

    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G10
    {% else %}
      M83
      G1 E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
      M82
    {% endif %}
    # Move Z Axis up
    G1 Z2.0 F3000

    G91
    G1 Y1 F5000
    G90

    G4 P1000
    
    {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
      G11
    {% else %}
      M83
      G1 E{RETRACTION_AMOUNT} F{RETRACTION_SPEED}
      M82
    {% endif %}
  {% endif %}

  G90
  # Reset Extruder
  G92 E0


[gcode_macro END_PRINT]
description: Put the bed in a accessibly position after printing is done
gcode:
  {% set FIRMWARE_RETRACT = params.FIRMWARE_RETRACT|default('FALSE')|string %}

  {% if 'RETRACTION_AMOUNT' in params|upper %}
    {% set RETRACTION_AMOUNT = params.RETRACTION_AMOUNT|float %}
  {% else %}
    {% set RETRACTION_AMOUNT = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% if 'RETRACTION_SPEED' in params|upper %}
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|float * 60 %}
  {% else %}
    {% set RETRACTION_SPEED = 0|float %}
    {% set FIRMWARE_RETRACT = 'TRUE'|string %}
  {% endif %}

  {% set position = printer.gcode_move.gcode_position %}

  {% if position.x < 150 %}
    {% set x = 0.5|float %}
  {% else %}
    {% set x = -0.5|float %}
  {% endif %}

  {% if position.y < 150 %}
    {% set y = 0.5|float %}
  {% else %}
    {% set y = -0.5|float %}
  {% endif %}

  {% if position.z < (printer.toolhead.axis_maximum.z - 10) %}
    {% set z1 = 5 %}
    {% set z2 = 5 %}
  {% elif position.z < (printer.toolhead.axis_maximum.z - 5) %}
    {% set z1 = 5 %}
    {% set z2 = printer.toolhead.axis_maximum.z  - position.z - 5 %}
  {% else %}
    {% set z1 = printer.toolhead.axis_maximum.z  - position.z %}
    {% set z2 = 0 %}
  {% endif %}

  M400

  SET_HEATER_FAN HEATER_FAN=bed_fan FAN_SPEED=1.0
  
  {% if FIRMWARE_RETRACT|upper == 'TRUE' %}
    G10
  {% else %}
    G91
    G1 X{x} Y{y} Z{z1} E{RETRACTION_AMOUNT * -1} F{RETRACTION_SPEED}
    G90
  {% endif %}

  G91
  G1 X{x} Y{y} Z{z2} E-2 F2400
  G90

  M117 Done
  TURN_OFF_HEATERS

  G1 X{printer.configfile.settings.stepper_x.position_endstop - 5} Y{printer.configfile.settings.stepper_y.position_endstop - 5} F5000
  G1 Z{printer.configfile.settings.stepper_z.position_max - 5} F5000

  G92 E0
  
  M18
  M106 S0
  DISABLE_FILAMENT_SENSOR
  CLEAR_PAUSE
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0.00
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE=0
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan VALUE=0
  UPDATE_DELAYED_GCODE ID=RESET_FILE DURATION=35


[gcode_macro PAUSE]
description: Pause the current running print
rename_existing: PAUSE_BASE
gcode:
  {% set Z = params.Z|default(10)|int %}     
  {% set HOTEND_OFF = params.HOTEND_OFF|default('True')|boolean %}

  {% if printer['pause_resume'].is_paused|int == 0 %}
    DISABLE_FILAMENT_SENSOR

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={Z}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=fan VALUE={printer['fan'].speed}

    SAVE_GCODE_STATE NAME=PAUSE
    PAUSE_BASE
    {% if (printer.gcode_move.position.z + Z) < printer.toolhead.axis_maximum.z %}
      G91
      G1 Z{Z} F900
    {% else %}
      { action_respond_info("Pause zhop exceeds maximum Z height.") }
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90
    G0 X{printer["gcode_macro _PARK_VARIABLES"].park_pos[0]} Y{printer["gcode_macro _PARK_VARIABLES"].park_pos[1]} F6000
    SAVE_GCODE_STATE NAME=PAUSEPARK
    {% if HOTEND_OFF %}
      SET_HEATER_TEMPERATURE HEATER=extruder
    {% endif %}
  {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_zhop: 0
variable_etemp: 0
variable_fan: 0
gcode:
  {% set E = params.E|default(2.5)|int %}

  {% if printer['pause_resume'].is_paused|int == 1 %}
    {% if etemp > 0 %}
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int}
    {% endif %}
    M106 S{fan}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
    G91
    M83
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 Z{zhop * -1} E{E} F900
    {% else %}
      G1 Z{zhop * -1} F900
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
    RESUME_BASE
    ENABLE_FILAMENT_SENSOR FILAMENT_TYPE='{printer['gcode_macro START_PRINT'].filament_type|string}' FILAMENT_PROFILE='{printer['gcode_macro START_PRINT'].filament_profile|string}'
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the current running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE


# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
