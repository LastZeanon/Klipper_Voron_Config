[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}   
    {% endif %} 

    {% if search in ns.path|lower %}
      { action_respond_info(ns.path|join) }
    {% endif %} 

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}

        {% if ' ' in childkey %}
          {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}
          {% set null = ns.path.append(".%s" % (childkey)) %}
        {% endif %} 

        {% if child is mapping  %}
          { loop(child.items()) }
        {% else %}
          {% if search in ns.path|lower %}
            { action_respond_info("%s : %s" % (ns.path|join, child)) }   
          {% endif %} 
        {% endif %} 
        
      {% endfor %}
    {% endif %} 
  {% endfor %}

[gcode_macro _PARSE_MARLIN_PARAMS]
description: Translates marlin params into klipper params
gcode:
    {% set TARGET = params.TARGET|string %}
    {% set ARGS = params.ARGS|default("")|string %}
    {% set TARGET_ARGS = params.TARGET_ARGS|default("")|string %}

    # This parses the rawparams by first removing trailing comments with ; and '\x23' = '#', then splitting
    # the result by whitespace (to obtain a list of arguments)
    {% set parsed_params = ARGS.split(';', 1)[0].split('\x23', 1)[0].lower().split() %}
    {% set parsed_target_args = dict() %}

    {% for p in TARGET_ARGS.split(';', 1)[0].split('\x23', 1)[0].upper().split() %}
      {% set param = p.split('=') %}
      {% set _ = parsed_target_args.update({param[0].strip(): param[1].strip()}) %}
    {% endfor %}
      

    # { action_respond_info("ARGS: {}, parsed: {}, TARGET_ARGS: {}".format(ARGS, parsed_params, parsed_target_args)) }

    {% set macro_command = [ TARGET ] %}
    
    {% for x in parsed_params %}
        {% if parsed_target_args[x[0:1]] is defined %}
          {% set target_arg = parsed_target_args[x[0:1]] %}
        {% else %}
          {% set target_arg = x[0:1] %}
        {% endif %}

        {% if x|length > 1 %}
          {% set value = x[1:] %}
        {% else %}
          {% set value = 'TRUE' %}
        {% endif %}

        {% set _ = macro_command.append('%s=%s ' % (target_arg, value)) %}
    {% endfor %}

    # { action_respond_info("Command: {}".format(macro_command|join(' '))) }
    { macro_command|join(' ') }

[gcode_macro FANS_OFF]
gcode:
  M107
